

* QUITANDO LAS COSAS QUE NO NECESITO


 #+BEGIN_SRC emacs-lisp
   (scroll-bar-mode -1)
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (global-linum-mode 1)
   (setq truncate-lines t)
   (electric-pair-mode 1)
   ;(set-face-attribute 'default t :height 140)
   (add-to-list 'default-frame-alist '(fullscreen . maximized))
   (size-indication-mode t)                                      ; Muestra el tama√±o del archivo
   (custom-set-variables
    '(initial-frame-alist (quote ((fullscreen . maximized)))))   
   (setq default-directory "~/Respaldo/Cosas/" )
   (setq org-log-done t)
   (setq make-backup-files nil)
   (setq auto-save-file nil)
   (setq org-agenda-files (list "~/Respaldo/Cosas/Dev/org"))
   (setq inhibit-startup-screen t)
   (global-set-key  (kbd "C-c l") 'org-store-link)
   (global-set-key (kbd "C-c a")'org-agenda)
   (global-set-key (kbd "<mouse-8>") 'other-window)
   (global-set-key (kbd "<mouse-9>") 'switch-to-buffer)
   (global-set-key (kbd "C-c y") 'popup-kill-ring)
   (global-set-key (kbd "<f2>") 'treemacs)
   (global-set-key (kbd "C-M-<mouse-1>") 'mc/add-cursor-on-click)
   (global-set-key (kbd "C-<down>") 'mc/mark-next-like-this)
   (global-set-key (kbd "C-<up>") 'mc/mark-previous-like-this)
   (global-set-key (kbd "C-c o l") 'org-babel-load-file)
   (defalias 'yes-or-no-p 'y-or-n-p)

  #+END_SRC
ol* USANDO FUENTES

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default t :family "Roboto-Ligth" :height 120)

#+END_SRC


* CONFIGURACION DEL UX
** ORG-BULLETS
#+BEGIN_SRC emacs-lisp
      (use-package org-bullets
	:ensure t
	:config
	(org-bullets-mode 1))

#+END_SRC

**  CONFIGURACION DE TEMAS
#+BEGIN_SRC emacs-lisp
  (setq linum-format "%3d \u2000")
    (hl-line-mode 1)
  ;  (use-package kaolin-themes
   ;   :ensure t)
   ;(load-theme 'modus-vivendi-tinted)

 #+END_SRC
    
** CONFIGURACION DE UNDO TREE.
  
#+BEGIN_SRC emacs-lisp
	  (use-package undo-tree
	    :config
	    (global-undo-tree-mode +1)
	    (setq undo-tree-visualizer-timestamps t
		  undo-tree-visualizer-diff nil)
	    (setq undo-tree-auto-save-history -1))

  
    (use-package paren
	    :init
	    (show-paren-mode 1)
	    :config
	    (setq show-paren-style 'parenthesses)
	    :custom-face
	    (show-paren-match ((t(:background "none" :foreground "red")))))
	  (use-package highlight-parentheses
	    :ensure t
	    :hook
	    ((prog-mode org-mode) . highlight-parentheses-mode)
	    :config
	    (setq highlight-parentheses-colors '("green" "gold" "red" "medium spring green" "cyan" "dark orange" "deep pink"))
	    :custom-face
	    (highlight-parentheses-highlight ((t (:weight bold)))))
	  (use-package rainbow-delimiters
	    :ensure t
	    :config
	    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
	  (setq make-pointer-invisible t)         ; hide cursor when writing

	  (use-package multiple-cursors
	    :ensure t
	    :bind

	    ("M-s n" . mc/unmark-next-like-this)
	    ("M-s p" . mc/unmark-previous-like-this)
	    ("M-s s" . mc/mark-all-like-this)
	    ("M-s m" . mc/mark-all-like-this-dwim)

	    ("M-s SPC" . set-rectangular-region-anchor)
	    ("M-s l" . mc/insert-numbers)
	    ("M-s a" . mc/vertical-align)
	    ("M-s i" . mc/edit-lines))

#+END_SRC  

** ALL the ICONS DIRED
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode)
    :init (setq all-the-icons-dired-monochrome nil))
	#+END_SRC

** EMOJIFY
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode)
    :custom
    (emojify-emoji-styles '(unicode)))
  (global-set-key (kbd "C-c e") 'emojify-insert-emoji)
#+END_SRC
** DASHBOARD  
  
#+BEGIN_SRC emacs-lisp

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/elpa/dashboard-20220615.540/banners/logo.png")
    (setq dashboard-banner-logo-title "finosiles")
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t))

#+END_SRC

* MAGIT

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC

* Company TABNINE


#+BEGIN_SRC emacs-lisp

;  (use-package company-tabnine
 ;   :ensure t )


#+END_SRC

* Projectile

  #+BEGIN_SRC emacs-lisp

    (use-package projectile
      :ensure t
      :init
      (projectile-mode +1)
      :bind (:map projectile-mode-map
		  ("s-p" . projectile-command-map)
		  ("C-c p" . projectile-command-map))) 
    (setq projectile-project-search-path '("~/Respaldo/Cosas/Dev/"))
  #+END_SRC

* Configuracion de COMPANY MODE.


#+BEGIN_SRC emacs-lisp

  (use-package company
	:init
	(add-hook 'after-init-hook 'global-company-mode))
      (company-mode 1)

#+END_SRC



 * PERSPECTIVE
   #+BEGIN_SRC emacs-lisp
     (use-package perspective
       :ensure t
       :custom
       (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
       :config
       (global-set-key (kbd "C-x x t") 'persp-list-buffers)
       (global-set-key (kbd "C-x x s") 'persp-switch)
       (global-set-key (kbd "C-x x n") 'persp-next)
       (global-set-key (kbd "C-x x f") 'persp-prev)
       :init
       (persp-mode))
   #+END_SRC
* HELM MODE
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-x b") 'helm-buffers-list)
    (bind-key "C-s" #'helm-occur)
    )

#+END_SRC
* Configuracion de EMMET MODE.
#+BEGIN_SRC  emacs-lisp
  (use-package emmet-mode
    :ensure t
    :bind
    ("C-<tab>" . emmet-expand-line)
    :diminish
    :config
    (add-to-list 'emmet-jsx-major-modes 'your-jsx-major-mode)
    :custom
    (emmet-indentation 2)
    (emmet-move-cursor-between-quotes t)
    :hook ((mhtml-mode css-mode scss-mode rjsx-mode) . emmet-mode))


  (defun html-setup ()
    (sgml-electric-tag-pair-mode))

  (use-package mhtml-mode
    :hook (mhtml-mode . html-setup)
    :config
    (setq-default sgml-basic-offset 2))

  (use-package css-mode
    :mode "\\.css\\'")

  (use-package js2-mode
    :mode "\\.js\\'"
    :config
    (setq js-indent-level 2)
    (setq js2-indent-level 2)
    (setq js2-basic-offset 2)
    (setq js2-mode-show-strict-warnings t)
    (setq js2-strict-inconsistent-return-warning t)
    (setq js2-strict-missing-semi-warning t))

#+END_SRC

* popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t)
#+END_SRC
* which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :hook (after-init . which-key-mode)
    :custom
    (which-key-idle-delay 0.5))
#+END_SRC



* Configuracion JS JSX


#+begin_src emacs-lisp

(use-package rjsx-mode
:ensure t)
(add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode)) 

#+end_src


* FLYCHECK

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))
#+end_src
