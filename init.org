#+TITLE: Configuración de emacs para trabajar en desarrollo web
#+AUTHOR: Rufino Siles 
		
* QUITANDO LAS COSAS QUE NO NECESITO


 #+BEGIN_SRC emacs-lisp
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (global-linum-mode 1)
    (setq truncate-lines t)
    (electric-pair-mode 1)
   (set-face-attribute 'default t :height 130)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    (size-indication-mode t)                                      ; Muestra el tamaño del archivo
    (custom-set-variables
     '(initial-frame-alist (quote ((fullscreen . maximized)))))   
    (setq default-directory "~/Respaldo/Cosas/" )
    (setq org-log-done t)
    (setq make-backup-files nil)
    (setq auto-save-file nil)
    (setq org-agenda-files (list "~/Respaldo/Cosas/Dev/org"))
    (setq inhibit-startup-screen t)
    (global-set-key  (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a")'org-agenda)
    (global-set-key (kbd "<mouse-8>") 'other-window)
    (global-set-key (kbd "<mouse-9>") 'switch-to-buffer)
    (global-set-key (kbd "C-c y") 'popup-kill-ring)
    (global-set-key (kbd "<f2>") 'treemacs)
    (global-set-key (kbd "C-M-<mouse-1>") 'mc/add-cursor-on-click)
    (global-set-key (kbd "C-<down>") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<up>") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c o l") 'org-babel-load-file)
    (defalias 'yes-or-no-p 'y-or-n-p)

  #+END_SRC

* CONFIGURACION DEL UX

** ORG-BULLETS
#+BEGIN_SRC emacs-lisp
      (use-package org-bullets
	:ensure t
	:config
	(org-bullets-mode 1))

#+END_SRC

**  CONFIGURACION DE TEMAS
#+BEGIN_SRC emacs-lisp
  (setq linum-format "%3d \u2000")
    (hl-line-mode 1)
  ;  (use-package kaolin-themes
   ;   :ensure t)
   ;(load-theme 'modus-vivendi-tinted)

 #+END_SRC
    
** CONFIGURACION DE UNDO TREE.
  
#+BEGIN_SRC emacs-lisp


  (use-package paren
	  :init
	  (show-paren-mode 1)
	  :config
	  (setq show-paren-style 'parenthesses)
	  :custom-face
	  (show-paren-match ((t(:background "none" :foreground "red")))))
	(use-package highlight-parentheses
	  :ensure t
	  :hook
	  ((prog-mode org-mode) . highlight-parentheses-mode)
	  :config
	  (setq highlight-parentheses-colors '("green" "gold" "red" "medium spring green" "cyan" "dark orange" "deep pink"))
	  :custom-face
	  (highlight-parentheses-highlight ((t (:weight bold)))))
	(use-package rainbow-delimiters
	  :ensure t
	  :config
	  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
	(setq make-pointer-invisible t)         ; hide cursor when writing

	(use-package multiple-cursors
	  :ensure t
	  :bind

	  ("M-s n" . mc/unmark-next-like-this)
	  ("M-s p" . mc/unmark-previous-like-this)
	  ("M-s s" . mc/mark-all-like-this)
	  ("M-s m" . mc/mark-all-like-this-dwim)

	  ("M-s SPC" . set-rectangular-region-anchor)
	  ("M-s l" . mc/insert-numbers)
	  ("M-s a" . mc/vertical-align)
	  ("M-s i" . mc/edit-lines))

#+END_SRC  

** ALL the ICONS DIRED
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode)
    :init (setq all-the-icons-dired-monochrome nil))
	#+END_SRC

** EMOJIFY
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode)
    :custom
    (emojify-emoji-styles '(unicode)))
  (global-set-key (kbd "C-c e") 'emojify-insert-emoji)
#+END_SRC
** DASHBOARD  
  #+BEGIN_SRC emacs-lisp

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/elpa/dashboard-20220615.540/banners/logo.png")
    (setq dashboard-banner-logo-title "finosiles")
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t))

#+END_SRC


** DIRED

#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook (lambda()(dired-hide-details-mode)))
#+END_SRC

* CONFIGURACION DE PROJECTLE-HELM-COMPANY

  
** CONFIGURACION DE COMPANY MODE.


#+BEGIN_SRC emacs-lisp

  (use-package company
	:init
	(add-hook 'after-init-hook 'global-company-mode))
      (company-mode 1)

#+END_SRC



**  PERSPECTIVE
   #+BEGIN_SRC emacs-lisp
     (use-package perspective
       :ensure t
       :custom
       (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
       :config
       (global-set-key (kbd "C-x x t") 'persp-list-buffers)
       (global-set-key (kbd "C-x x s") 'persp-switch)
       (global-set-key (kbd "C-x x n") 'persp-next)
       (global-set-key (kbd "C-x x f") 'persp-prev)
       :init
       (persp-mode))
   #+END_SRC
** HELM MODE
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-x b") 'helm-buffers-list)
    (bind-key "C-s" #'helm-occur)
    )

#+END_SRC
